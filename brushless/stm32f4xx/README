> Copyright (C) 2019  Adrien Boussicault <adrien.boussicault@labri.fr>
>
> This program is free software: you can redistribute it and/or
> modify it under the terms of the GNU Lesser General Public
> License as published by the Free Software Foundation, either
> version 3 of the License, or (at your option) any later version.
>
> This program is distributed in the hope that it will be useful,
> but WITHOUT ANY WARRANTY; without even the implied warranty of
> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
> Lesser General Public License for more details.
>
> You should have received a copy of the GNU Lesser General Public
> License along with this program.  If not, see
> <http://www.gnu.org/licenses/>.

##################
# Installation : #
##################

Install the following package :
-------------------------------

sudo apt-get install dfu-util cu build-essential

Uninstall the modemmanager : 
----------------------------

sudo apt-get remove modemmanager

( The modmeManger will grab the serial line of the USB : /dev/ttyACM0;
if you are using this service, you should prefer do desactivate them with the
following command : systemctl stop ModemManager.service )

Add Udev permition to have access to /dev/ttyACMO
-------------------------------------------------

sudo adduser USER plugdev
sudo adduser USER dialout

Add/edit the file /etc/udev/rules.d/42-cycloide.rules and add the following 
lines :

ATTRS{idProduct}=="4567", ATTRS{idVendor}=="f123", MODE="664", GROUP="plugdev" SYMLINK+="brushless"
ATTRS{idProduct}=="5740", ATTRS{idVendor}=="0483", MODE="664", GROUP="plugdev" SYMLINK+="stm32"

The first line is for the normal mode. It allow to comunicate with the 
brushless. The second one is used to flash the firmware.

Restart the udev service :
 
sudo /etc/init.d/udev restart

Download the last ARM compilator from the website :
---------------------------------------------------

We use the gcc-arm-none-eabi compiler. You can download it at the adress :

https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads

Install the compilator in the root directory of the project.

You can install the compiler in another directory. In this case, 
we will explain, in the next sections, how to adapt the compilation process.

Normally, the project should looks like :
<root_directory>
├── Core
├── gcc-arm-none-eabi-XXXXXXXXX
│   ├── bin
│   ...
├── Makefile
...


Download the CMSIS source code :
--------------------------------

In the root directory, type :

git clone https://github.com/ARM-software/CMSIS_5.git CMSIS_5

You can install the compiler in another directory. In this case, 
we will explain, in the next sections, how to adapt the compilation process.

Normally, the project should looks like :
<root_directory>
├── Core
├── CMSIS_5
│   ├── CMSIS
│   ...
├── Makefile
...


OPTIONAL INSTALLATION (to use JTAG):
-------------------------------------

You can install JLink tools in order to use JTAG to flash or print.
Go to the website :  

https://www.segger.com/downloads/jlink/

And install the J-Link Softwate and Documentation Pack

#########################################
# Compile the application               #
#########################################

Just type

make


If you have installed GCC and CMSIS in unusual place, then you have to type :

make GCC_PATH=<ARM_DIRECTORY>/bin CMSIS_PATH=<CMSIS_5_PATH>/CMSIS

otherwise, you just have to add two symbolic links :

cd <root directory>
ln -s ARM_DIRECTIRY gcc-arm-none-eabi
ln -s CMSIS_5_DIRECTIRY CMSIS_5

###################
# Flash the board #
###################

Three solution are possible dependong of the situation.
IF THE BOARD HAVE NOT YET BEEN FLASHED, YOU SHOULD USE SOLUTION 1) OR 2).
Solution 3) is the most simple one and it is used to update the firmware (we 
need the board to be yet flashed).

Short description of the 3 solutions : 
 1) FLASH BY USB USING THE RESET AND BOOT0 BUTTONS
   This solution doesn't need the board to be yet flashed.
   This solution need USB wire and and an access to the BOOT0 and RESET buttons
   of the board
 2) FLASH BY JTAG USING THE JLink SOFWTARE
   This solution doesn't need the board to be yet flashed.
   This solution need an USB wire (for the power) and a JTAG for the connection.
   This solution Use JLink software (see Optional installation)
   The JLink software download just the part of the memory that have changed.
   So the flash operation are fast and the life of the flash memory is 
   increased.
 3) FLASH BY USB WITHOUT USING THE RESET BUTTONS
   This solution need the board to be yet flashed
   ( by using 1) or  2) ).
   This solution just need a USB wire ! :)
   This solution DO NOT require an acess to the BOOT0 and RESET button ! :)


1) FLASH BY USB USING THE RESET AND BOOT0 BUTTONS

 Connect the USB wire.

 Press and hold the BOOT0 button, then press and realease de RESET button,
 and finally release the BOOT0 button.

 Type the command :
 ./first_flash_with_usb_and_reset_button.sh

2) FLASH BY JTAG USING THE JLink SOFWTARE

 ./jtag_flash.sh

3) FLASH BY USB WITHOUT THE RESET BUTTONS

 ./usb_flash.sh

########################
# Connect to the board #
########################

First Connect the USB wire.

Execute the command 

dmesg

to know on which device the board is connected (usualy it is /dev/ttyACM0).

Open a command line into the board by typing:

cu -l /dev/ttyACM0

Enjoy :) 
(In the command line, help is the first helpfull command to know)

OPTIONAL :
----------
Some information is sent using the jtag link. (just some small message 
to prevent warnings and errors) Those messages appear in the terminal too.

If you want to read the jtag output, you need to install JLink (see the
optional section on JTag) and then, you just have to type : 

./print_jtag


